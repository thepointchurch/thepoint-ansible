- name: "NGINX config : {{ shortname }}"
  template:
    src: nginx.conf
    dest: "/etc/nginx/{{ shortname }}.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - nginx_reload
- name: "Cloudflare DNS : {{ shortname }}"
  when:
    - cloudflare_email is defined
    - cloudflare_token is defined
    - "cloudflare_email.split('@')[1] in item"
  community.general.cloudflare_dns:
    state: present
    zone: "{{ cloudflare_email.split('@')[1] }}"
    type: CNAME
    record: "{{ item.replace('.' + cloudflare_email.split('@')[1], '') }}"
    value: "{{ ansible_fqdn }}"
    proxied: yes
    account_email: "{{ cloudflare_email }}"
    account_api_token: "{{ cloudflare_token }}"
  with_items: "{{ vhost.split(' ') }}"
- name: "LetsEncrypt Certificate : {{ shortname }}"
  command:
    cmd: "docker run -v '/data/acme:/etc/letsencrypt:rw' certbot/dns-cloudflare{{ certbot_tag }} certonly -n {% for n in vhost.split(' ') %} -d {{ n }}{% endfor %}"  # noqa 204
    creates: "/data/acme/live/{{ vhost.split(' ')[0] }}/fullchain.pem"
- name: "Secret: DB Password : {{ shortname }}"
  copy:
    content: "{{ db_password }}"
    dest: "/etc/secrets/db_password_{{ shortname }}.txt"
    owner: root
    group: root
    mode: 0644
- name: "Secret: DB URL : {{ shortname }}"
  copy:
    content: "psql://thepoint:{{ db_password }}@db:5432/thepoint"
    dest: "/etc/secrets/db_url_{{ shortname }}.txt"
    owner: root
    group: root
    mode: 0644
- name: "Secret Key : {{ shortname }}"
  copy:
    content: "{{ secret_key }}"
    dest: "/etc/secrets/secret_key_{{ shortname }}.txt"
    owner: root
    group: root
    mode: 0644
- name: "Docker Frontend Network : {{ shortname }}"
  community.general.docker_network:
    name: "frontend_{{ shortname }}"
- name: "Docker Backend Network : {{ shortname }}"
  community.general.docker_network:
    name: "backend_{{ shortname }}"
- name: "Redis Configuration : {{ shortname }}"
  copy:
    content: |
      appendonly yes
      auto-aof-rewrite-percentage 100
      auto-aof-rewrite-min-size 32mb
    dest: "/etc/redis.conf"
    owner: root
    group: root
    mode: 0644
- name: "Redis Compose : {{ shortname }}"
  when: cache_url is match("redis:")
  community.general.docker_compose:
    project_name: "redis_{{ shortname }}"
    state: present
    pull: yes
    definition:
      version: '3.1'
      services:
        cache:
          image: redis:alpine
          container_name: "cache_{{ shortname }}"
          command: ["redis-server", "/etc/redis.conf"]
          restart: unless-stopped
          volumes:
            - /usr/share/zoneinfo/Australia/Brisbane:/etc/localtime:ro
            - "/etc/redis.conf:/etc/redis.conf:ro"
            - "/data/redis_{{ shortname }}:/data"
          logging:
            driver: awslogs
            options:
              awslogs-group: "{{ log_group }}"
              awslogs-stream: redis
          cap_drop:
            - ALL
          cap_add:
            - CHOWN
            - SETGID
            - SETUID
          sysctls:
            net.core.somaxconn: 512
          read_only: true
          networks:
            - backend
      networks:
        backend:
          external:
            name: "backend_{{ shortname }}"
- name: "The Point Compose : {{ shortname }}"
  community.general.docker_compose:
    project_name: "{{ description }}"
    state: present
    pull: yes
    definition:
      version: '3.1'
      services:
        db:
          image: postgres:15-alpine
          container_name: "db_{{ shortname }}"
          environment:
            POSTGRES_USER: thepoint
            POSTGRES_PASSWORD_FILE: /run/secrets/db_password
          command: ["postgres", "-c", "timezone=Australia/Brisbane", "-c", "log_timezone=Australia/Brisbane"]
          restart: unless-stopped
          secrets:
            - db_password
          volumes:
            - /usr/share/zoneinfo/Australia/Brisbane:/etc/localtime:ro
            - "/data/postgres_{{ shortname }}:/var/lib/postgresql/data"
          logging:
            driver: awslogs
            options:
              awslogs-group: "{{ log_group }}"
              awslogs-stream: postgres
          cap_drop:
            - ALL
          cap_add:
            - CHOWN
            - DAC_READ_SEARCH
            - FOWNER
            - SETGID
            - SETUID
          read_only: true
          tmpfs:
            - /tmp
            - /run/postgresql
          networks:
            - backend
        django:
          image: "{{ docker_image }}"
          container_name: "django_{{ shortname }}"
          environment:
            DJANGO_SETTINGS_MODULE: "{{ settings }}"
            SECRET_KEY_FILE: /run/secrets/secret_key
            GUNICORN_CMD_ARGS: "--workers={{ workers }} --threads={{ threads }}"
            DATABASE_URL_FILE: /run/secrets/db_url
            DEBUG: "{% if debug %}on{% endif %}"
            CACHE_URL: "{{ cache_url }}"
            CACHE_TIMEOUT: "{{ cache_timeout }}"
            CACHEOPS_ENABLED: "{% if cache_ops %}on{% endif %}"
            MEDIAFILES_BUCKET: "{{ media_bucket }}"
            MEDIAFILES_ENCRYPTED: "{% if media_encrypted %}on{% endif %}"
            STATICFILES_BUCKET: "{{ static_bucket }}"
            EMAIL_BACKEND: "{{ email_backend }}"
            AWS_DEFAULT_REGION: "{{ aws_region }}"
            VHOST: "{{ vhost }} localhost"
          restart: unless-stopped
          secrets:
            - db_url
            - db_password
            - secret_key
          volumes:
            - /usr/share/zoneinfo/Australia/Brisbane:/etc/localtime:ro
          logging:
            driver: awslogs
            options:
              awslogs-group: "{{ log_group }}"
              awslogs-stream: django
          cap_drop:
            - ALL
          cap_add:
            - SYS_NICE
          depends_on:
            - db
          networks:
            backend:
            frontend:
              aliases:
                - "django_{{ shortname }}"
      networks:
        backend:
          external:
            name: "backend_{{ shortname }}"
        frontend:
          external:
            name: "frontend_{{ shortname }}"
      secrets:
        db_password:
          file: "/etc/secrets/db_password_{{ shortname }}.txt"
        db_url:
          file: "/etc/secrets/db_url_{{ shortname }}.txt"
        secret_key:
          file: "/etc/secrets/secret_key_{{ shortname }}.txt"
  notify:
    - "Django {{ shortname }} collectstatic"
    - "Django {{ shortname }} migrate"
- name: setvar
  set_fact:
    frontend_nets: "{{ frontend_nets + [ 'frontend_' + shortname ] }}"
- name: "Crontab : {{ shortname }}"
  lineinfile:
    state: "{% if cron %}present{% else %}absent{% endif %}"
    dest: /etc/docker.crontab
    create: yes
    owner: root
    group: root
    mode: 0644
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  loop:
    - line: "0 14 * * * docker exec django_{{ shortname }} upperroom-sendrosteremails"
      regexp: " docker exec django_{{ shortname }} upperroom-sendrosteremails"
  notify:
    - runner_restart
- name: "Crontab : {{ shortname }}"
  lineinfile:
    state: present
    dest: /etc/docker.crontab
    create: yes
    owner: root
    group: root
    mode: 0644
    line: "0 3 * * * docker exec django_{{ shortname }} upperroom clearsessions"
    regexp: " docker exec django_{{ shortname }} upperroom clearsessions"
  notify:
    - runner_restart
- name: "Install backup scripts : {{ shortname }}"
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
  with_items:
    - upperroom-backup.sh
    - upperroom-restore.sh
- name: "Backup : {{ shortname }}"
  when: backup_bucket != ""
  cron:
    name: "{{ shortname }}_backup"
    job: /usr/local/bin/upperroom-backup.sh "db_{{ shortname }}" "{{ media_bucket }}" "{{ backup_bucket }}"
    hour: "22"
    minute: "0"
