---
- name: "NGINX config : {{ thepoint_website_shortname }}"
  ansible.builtin.template:
    src: nginx.conf
    dest: "/etc/nginx/{{ thepoint_website_shortname }}.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - nginx_reload
- name: "Cloudflare DNS : {{ thepoint_website_shortname }}"
  when:
    - cloudflare_email is defined
    - cloudflare_token is defined
    - "cloudflare_email.split('@')[1] in item"
  community.general.cloudflare_dns:
    state: present
    zone: "{{ cloudflare_email.split('@')[1] }}"
    type: CNAME
    record: "{{ item.replace('.' + cloudflare_email.split('@')[1], '') }}"
    value: "{{ ansible_fqdn }}"
    proxied: yes
    account_email: "{{ cloudflare_email }}"
    account_api_token: "{{ cloudflare_token }}"
  with_items: "{{ thepoint_website_vhost.split(' ') }}"
- name: "LetsEncrypt Certificate : {{ thepoint_website_shortname }}"
  ansible.builtin.command:
    cmd: "docker run -v '/data/acme:/etc/letsencrypt:rw' certbot/dns-cloudflare{{ certbot_tag }} \
      certonly -n {% for n in thepoint_website_vhost.split(' ') %} -d {{ n }}{% endfor %}"
    creates: "/data/acme/live/{{ thepoint_website_vhost.split(' ')[0] }}/fullchain.pem"
- name: "Secret: DB Password : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    content: "{{ thepoint_website_db_password }}"
    dest: "/etc/secrets/db_password_{{ thepoint_website_shortname }}.txt"
    owner: root
    group: root
    mode: 0644
- name: "Secret: DB URL : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    content: "psql://thepoint:{{ thepoint_website_db_password }}@db_{{ thepoint_website_shortname }}:5432/thepoint"
    dest: "/etc/secrets/db_url_{{ thepoint_website_shortname }}.txt"
    owner: root
    group: root
    mode: 0644
- name: "Secret Key : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    content: "{{ thepoint_website_secret_key }}"
    dest: "/etc/secrets/secret_key_{{ thepoint_website_shortname }}.txt"
    owner: root
    group: root
    mode: 0644
- name: "Docker Frontend Network : {{ thepoint_website_shortname }}"
  community.general.docker_network:
    name: "frontend_{{ thepoint_website_shortname }}"
    enable_ipv6: true
- name: "Docker Backend Network : {{ thepoint_website_shortname }}"
  community.general.docker_network:
    name: "backend_{{ thepoint_website_shortname }}"
    enable_ipv6: true
- name: "Redis Configuration : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    content: |
      appendonly yes
      auto-aof-rewrite-percentage 100
      auto-aof-rewrite-min-size 32mb
    dest: "/etc/redis.conf"
    owner: root
    group: root
    mode: 0644
- name: "Redis Compose Configuration : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    dest: "/data/compose-redis-{{ thepoint_website_shortname }}.yaml"
    owner: root
    group: root
    mode: 0644
    content: |
      services:
        cache:
          image: redis:alpine
          container_name: "cache_{{ thepoint_website_shortname }}"
          command: ["redis-server", "/etc/redis.conf"]
          restart: unless-stopped
          volumes:
            - /usr/share/zoneinfo/Australia/Brisbane:/etc/localtime:ro
            - "/etc/redis.conf:/etc/redis.conf:ro"
            - "/data/redis_{{ thepoint_website_shortname }}:/data"
          logging:
            driver: awslogs
            options:
              awslogs-group: "{{ thepoint_website_log_group }}"
              awslogs-stream: redis
          cap_drop:
            - ALL
          cap_add:
            - CHOWN
            - SETGID
            - SETUID
            - DAC_OVERRIDE
          sysctls:
            net.core.somaxconn: 512
          read_only: true
          networks:
            - backend
      networks:
        backend:
          external: true
          name: "backend_{{ thepoint_website_shortname }}"
- name: "Redis Compose : {{ thepoint_website_shortname }}"
  when: thepoint_website_cache_url is match("redis:")
  community.docker.docker_compose_v2:
    project_name: "redis_{{ thepoint_website_shortname }}"
    state: present
    pull: always
    project_src: /data
    files: "compose-redis-{{ thepoint_website_shortname }}.yaml"
- name: "The Point Compose Configuration : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    dest: "/data/compose-thepoint-{{ thepoint_website_shortname }}.yaml"
    owner: root
    group: root
    mode: 0644
    content: |
      services:
        db:
          image: postgres:15-alpine
          container_name: "db_{{ thepoint_website_shortname }}"
          environment:
            POSTGRES_USER: thepoint
            POSTGRES_PASSWORD_FILE: /run/secrets/db_password
          command: ["postgres", "-c", "timezone=Australia/Brisbane", "-c", "log_timezone=Australia/Brisbane"]
          restart: unless-stopped
          secrets:
            - db_password
          volumes:
            - /usr/share/zoneinfo/Australia/Brisbane:/etc/localtime:ro
            - "/data/postgres_{{ thepoint_website_shortname }}:/var/lib/postgresql/data"
          logging:
            driver: awslogs
            options:
              awslogs-group: "{{ thepoint_website_log_group }}"
              awslogs-stream: postgres
          cap_drop:
            - ALL
          cap_add:
            - CHOWN
            - DAC_READ_SEARCH
            - FOWNER
            - SETGID
            - SETUID
          read_only: true
          tmpfs:
            - /tmp
            - /run/postgresql
          networks:
            - backend
        django:
          image: "{{ thepoint_website_docker_image }}"
          container_name: "django_{{ thepoint_website_shortname }}"
          environment:
            DJANGO_SETTINGS_MODULE: "{{ thepoint_website_settings }}"
            SECRET_KEY_FILE: /run/secrets/secret_key
            GUNICORN_CMD_ARGS: "--workers={{ thepoint_website_workers }} --threads={{ thepoint_website_threads }}"
            DATABASE_URL_FILE: /run/secrets/db_url
            DEBUG: "{% if thepoint_website_debug %}on{% endif %}"
            CACHE_URL: "{{ thepoint_website_cache_url }}"
            CACHE_TIMEOUT: "{{ thepoint_website_cache_timeout }}"
            CACHEOPS_ENABLED: "{% if thepoint_website_cache_ops %}on{% endif %}"
            MEDIAFILES_BUCKET: "{{ thepoint_website_media_bucket }}"
            MEDIAFILES_ENCRYPTED: "{% if thepoint_website_media_encrypted %}on{% endif %}"
            STATICFILES_BUCKET: "{{ thepoint_website_static_bucket }}"
            EMAIL_BACKEND: "{{ thepoint_website_email_backend }}"
            AWS_DEFAULT_REGION: "{{ aws_region }}"
            AWS_EC2_METADATA_V1_DISABLED: 'true'
            AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE: IPv6
            VHOST: "{{ thepoint_website_vhost }} localhost"
          restart: unless-stopped
          secrets:
            - db_url
            - db_password
            - secret_key
          volumes:
            - /usr/share/zoneinfo/Australia/Brisbane:/etc/localtime:ro
          logging:
            driver: awslogs
            options:
              awslogs-group: "{{ thepoint_website_log_group }}"
              awslogs-stream: django
          cap_drop:
            - ALL
          cap_add:
            - SYS_NICE
          depends_on:
            - db
          networks:
            backend:
            frontend:
              aliases:
                - "django_{{ thepoint_website_shortname }}"
      networks:
        backend:
          external: true
          name: "backend_{{ thepoint_website_shortname }}"
        frontend:
          external: true
          name: "frontend_{{ thepoint_website_shortname }}"
      secrets:
        db_password:
          file: "/etc/secrets/db_password_{{ thepoint_website_shortname }}.txt"
        db_url:
          file: "/etc/secrets/db_url_{{ thepoint_website_shortname }}.txt"
        secret_key:
          file: "/etc/secrets/secret_key_{{ thepoint_website_shortname }}.txt"
- name: "The Point Compose : {{ thepoint_website_shortname }}"
  community.docker.docker_compose_v2:
    project_name: "thepoint_{{ thepoint_website_shortname }}"
    state: present
    pull: always
    project_src: /data
    files: "compose-thepoint-{{ thepoint_website_shortname }}.yaml"
  notify:
    - "Django collectstatic {{ thepoint_website_shortname }}"
    - "Django migrate {{ thepoint_website_shortname }}"
- name: setvar
  ansible.builtin.set_fact:
    thepoint_website_frontend_nets: "{{ thepoint_website_frontend_nets + ['frontend_' + thepoint_website_shortname] }}"
- name: "Crontab : {{ thepoint_website_shortname }}"
  ansible.builtin.lineinfile:
    state: "{% if thepoint_website_cron %}present{% else %}absent{% endif %}"
    dest: /etc/docker.crontab
    create: yes
    owner: root
    group: root
    mode: 0644
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  loop:
    - line: "0 14 * * * docker exec django_{{ thepoint_website_shortname }} upperroom-sendrosteremails"
      regexp: " docker exec django_{{ thepoint_website_shortname }} upperroom-sendrosteremails"
  notify:
    - runner_restart
- name: "Crontab : {{ thepoint_website_shortname }}"
  ansible.builtin.lineinfile:
    state: present
    dest: /etc/docker.crontab
    create: yes
    owner: root
    group: root
    mode: 0644
    line: "0 3 * * * docker exec django_{{ thepoint_website_shortname }} upperroom clearsessions"
    regexp: " docker exec django_{{ thepoint_website_shortname }} upperroom clearsessions"
  notify:
    - runner_restart
- name: "Install backup scripts : {{ thepoint_website_shortname }}"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
  with_items:
    - upperroom-backup.sh
    - upperroom-restore.sh
- name: "Backup : {{ thepoint_website_shortname }}"
  when: thepoint_website_backup_bucket != ""
  ansible.builtin.cron:
    name: "{{ thepoint_website_shortname }}_backup"
    job: >-
      /usr/local/bin/upperroom-backup.sh "db_{{ thepoint_website_shortname }}" "{{ thepoint_website_media_bucket }}"
      "{{ thepoint_website_backup_bucket }}"
    hour: "22"
    minute: "0"
